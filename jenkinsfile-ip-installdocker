pipeline {
  agent any

  environment {
    GIT_BRANCH    = "dev"
    ANSIBLE_HOST  = "4.145.84.26"
    SSH_USER      = "boho"
    GIT_REPO      = "https://github.com/kitsanaphon1/ansible-ssh-test.git"
    PROJECT_DIR   = "ansible-ssh-test"
    DESTROY_MODE  = "false"
    KEY_NAME      = "id_rsa_ansible_final"
    KEY_PATH      = "/home/boho/.ssh/id_rsa_ansible_final"
  }

  stages {
    stage('🚀 Provision หรือ Destroy VM') {
      steps {
        withCredentials([
          string(credentialsId: 'AZURE_CLIENT_ID',       variable: 'AZURE_CLIENT_ID'),
          string(credentialsId: 'AZURE_SECRET',          variable: 'AZURE_SECRET'),
          string(credentialsId: 'AZURE_TENANT',          variable: 'AZURE_TENANT'),
          string(credentialsId: 'AZURE_SUBSCRIPTION_ID', variable: 'AZURE_SUBSCRIPTION_ID'),
          sshUserPrivateKey(credentialsId: 'ssh-ansible-agent', keyFileVariable: 'PRIVATE_KEY')
        ]) {
          sshagent(['ssh-ansible-agent']) {
            sh '''
              echo "🔐 สร้าง SSH Key ชื่อ id_rsa_ansible_final"
              ssh-keygen -t rsa -b 4096 -f "$WORKSPACE/$KEY_NAME" -N ""

              echo "📤 Copy private key ไป Ansible VM"
              scp -o StrictHostKeyChecking=no "$WORKSPACE/$KEY_NAME" ${SSH_USER}@${ANSIBLE_HOST}:${KEY_PATH}
              ssh -o StrictHostKeyChecking=no ${SSH_USER}@${ANSIBLE_HOST} "chmod 600 ${KEY_PATH}"

              echo "📄 สร้างสคริปต์ remote บน Ansible"
              PUBLIC_KEY=$(cat "$WORKSPACE/${KEY_NAME}.pub")
              cat > run_ansible_remote.sh <<EOF
#!/bin/bash
set -e
source /home/boho/ansible-env/bin/activate

export AZURE_CLIENT_ID="${AZURE_CLIENT_ID}"
export AZURE_SECRET="${AZURE_SECRET}"
export AZURE_TENANT="${AZURE_TENANT}"
export AZURE_SUBSCRIPTION_ID="${AZURE_SUBSCRIPTION_ID}"
export PUBLIC_KEY="${PUBLIC_KEY}"

cd ~

if [ ! -d "${PROJECT_DIR}" ]; then
  git clone "${GIT_REPO}"
fi

cd "${PROJECT_DIR}"
git fetch origin
git checkout -B ${GIT_BRANCH} origin/${GIT_BRANCH}
git pull origin ${GIT_BRANCH}
cd playbooks

if [ "${DESTROY_MODE}" = "true" ]; then
  echo "🔥 ลบ VM ทั้งหมด"
  ansible-playbook destroy-linux-vm.yaml -e "@../config/config-dev.yaml"
else
  echo "🚀 สร้าง VM"
  ansible-playbook create-linux-vm.yaml \\
    -e "@../config/config-dev.yaml" \\
    -e "admin_ssh_public_key='${PUBLIC_KEY}'"
fi
EOF

              echo "📡 ส่ง script ไปยัง Ansible VM"
              scp -o StrictHostKeyChecking=no run_ansible_remote.sh ${SSH_USER}@${ANSIBLE_HOST}:/tmp/

              echo "🚀 รัน script บน Ansible VM"
              ssh -o StrictHostKeyChecking=no ${SSH_USER}@${ANSIBLE_HOST} 'bash /tmp/run_ansible_remote.sh'
            '''
          }
        }
      }
    }

    stage('🌐 Get Public IP') {
      steps {
        withCredentials([
          string(credentialsId: 'AZURE_CLIENT_ID',       variable: 'AZURE_CLIENT_ID'),
          string(credentialsId: 'AZURE_SECRET',          variable: 'AZURE_SECRET'),
          string(credentialsId: 'AZURE_TENANT',          variable: 'AZURE_TENANT'),
          string(credentialsId: 'AZURE_SUBSCRIPTION_ID', variable: 'AZURE_SUBSCRIPTION_ID')
        ]) {
          sshagent(['ssh-ansible-agent']) {
            sh '''
              echo "🌐 ดึง Public IP จาก Azure"
              ssh -o StrictHostKeyChecking=no ${SSH_USER}@${ANSIBLE_HOST} "
                export AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
                export AZURE_SECRET=${AZURE_SECRET}
                export AZURE_TENANT=${AZURE_TENANT}
                export AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}

                source ~/ansible-env/bin/activate
                cd ~/ansible-ssh-test/playbooks
                ansible-playbook get-ip.yaml -e '@../config/config-dev.yaml'
              "
            '''
          }
        }
      }
    }

    stage('🐳 Install Docker on Target VM') {
      steps {
        sshagent(['ssh-ansible-agent']) {
          sh '''
            echo "📖 อ่าน IP ที่ได้จากไฟล์"
            VM_IP=$(ssh -o StrictHostKeyChecking=no ${SSH_USER}@${ANSIBLE_HOST} cat ~/ip.txt)

            echo "🐳 ติดตั้ง Docker ผ่าน Ansible"
            ssh -o StrictHostKeyChecking=no ${SSH_USER}@${ANSIBLE_HOST} "
              source ~/ansible-env/bin/activate
              cd ~/ansible-ssh-test/playbooks
              ansible-playbook install-docker.yaml -i '\${VM_IP},' \\
                -e 'ansible_user=azureuser' \\
                -e 'ansible_ssh_private_key_file=${KEY_PATH}'
            "
          '''
        }
      }
    }
  }
}
